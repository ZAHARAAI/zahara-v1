services:
  # FastAPI Application
  fastapi:
    build: .
    container_name: fastapi-backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - DATABASE_URL=postgresql://fastapi_user:secure_password_123@postgres:5432/fastapi_db
      - REDIS_URL=redis://:redis_password_123@redis:6379
      - QDRANT_URL=http://qdrant:6333
      - LOCAL_LLM_URL=http://ollama:11434
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    volumes:
      - ./app:/app/app
      - ./requirements.txt:/app/requirements.txt
    networks:
      - fastapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fastapi-postgres
    environment:
      POSTGRES_USER: fastapi_user
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_DB: fastapi_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - fastapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastapi_user -d fastapi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fastapi-redis
    command: redis-server --requirepass redis_password_123 --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fastapi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: fastapi-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__API_KEY: qdrant_secure_key_123
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - fastapi-network
    restart: unless-stopped

  # Local LLM Service (Ollama)
  ollama:
    image: ollama/ollama:latest
    container_name: fastapi-ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - fastapi-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flowise Service
  # flowise:
  #   image: flowiseai/flowise:latest
  #   container_name: fastapi-flowise
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - DATABASE_PATH=/root/.flowise
  #     - APIKEY_PATH=/root/.flowise
  #     - SECRETKEY_PATH=/root/.flowise
  #     - LOG_LEVEL=info
  #     - LOG_PATH=/root/.flowise/logs
  #     - FLOWISE_USERNAME=admin
  #     - FLOWISE_PASSWORD=flowise_admin_123
  #   volumes:
  #     - flowise_data:/root/.flowise
  #   networks:
  #     - fastapi-network
  #   restart: unless-stopped
  #   depends_on:
  #     - postgres
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  # flowise_data:
  #   driver: local

networks:
  fastapi-network:
    driver: bridge