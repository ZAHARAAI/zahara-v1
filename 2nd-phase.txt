You are an expert full-stack developer tasked with implementing the Zahara.ai Agent Clinic MVP. You must deliver a complete, production-ready observability dashboard with both frontend and backend components.

## PROJECT CONTEXT
- Existing repo: Zahara.ai v1 with FastAPI backend, PostgreSQL, Redis, Qdrant, Flowise fork
- Current state: Basic backend infrastructure exists, no frontend
- Goal: Build Agent Clinic for LLM trace observability and debugging
- Integration: Connect with existing Flowise workflow executions for rich trace data

## CORE DELIVERABLES

### 1. BACKEND IMPLEMENTATION
**Database Schema (PostgreSQL)**
- Create Alembic migration for traces, spans, events tables
- Traces table: trace_id, timestamp, total_duration, total_tokens, total_cost, status, user_id, workflow_id, model
- Spans table: span_id, trace_id, start_time, end_time, duration, status, model, tokens, cost, operation, metadata, provider
- Events table: event_id, trace_id, span_id, timestamp, level, message, metadata
- Flowise_executions table: execution_id, workflow_id, trace_id, flowise_data

**API Endpoints (FastAPI)**
- GET /traces - List traces with filtering, pagination, sorting
- GET /traces/{trace_id} - Get trace details with spans
- GET /traces/{trace_id}/spans - Get all spans for a trace
- GET /traces/export - Export traces as CSV
- GET /metrics/aggregate - Get P50/P95 latency, success rates
- GET /flowise/executions - List Flowise workflow executions
- All endpoints must support X-API-Key authentication

**Middleware Enhancement**
- Modify existing ObservabilityMiddleware to capture structured traces
- Store request_id, start_time, end_time, status, tokens (if available)
- Connect to LLM service calls for token/cost tracking
- Bridge with Flowise EvaluationRunTracer for workflow execution data
- Ensure trace data is persisted to database

### 2. FRONTEND IMPLEMENTATION
**Tech Stack**
- Vite + React + TypeScript + Tailwind CSS
- Modern Dark Tech Aesthetic with Zahara.ai branding
- Responsive design, mobile-friendly

**Design System & Color Scheme**
- Primary Brand Color: Vibrant orange (#FF6B35)
- Background: Deep black/dark gray (#000000 to #1a1a1a)
- Text Colors:
  - Primary text: Pure white (#FFFFFF)
  - Secondary text: Light gray (#B0B0B0 to #CCCCCC)
- Accent Elements: Dark gray cards/sections (#2a2a2a to #333333)
- High contrast dark theme with bright orange accents
- Minimalist and clean layout with plenty of white space
- Professional yet approachable enterprise software vibe
- Gradient overlays and subtle shadows for depth

**Typography & Layout**
- Sans-serif fonts (Inter or Roboto)
- Bold headings with strong hierarchy
- Clean, readable body text in light gray
- Strategic use of orange for key CTAs and highlights
- Centered, wide-container layouts
- Card-based information architecture
- Clean form designs with dark backgrounds

**Components Structure**frontend
/src
/components
/common (Button, Input, Modal, etc.)
/layout (Sidebar, Header, Layout)
/traces (TraceTable, SpanDrawer, Filters)
/ui (KPI tiles, Status badges, Loaders)
/pages
/clinic (main Agent Clinic page)
/hooks (useTraces, useAuth, etc.)
/services (API client, auth)
/types (TypeScript interfaces)
/utils (helpers, formatters)

**Key Components**
- TraceTable: Sortable, filterable table with pagination
- SpanDrawer: Slide-out panel with detailed span metrics
- Filters: Date range, status, model, operation filters
- KPI Tiles: Animated counters for latency, tokens, cost, success rate
- Status Badges: Color-coded badges for OK/ERROR/RATE-LIMIT
- Skeleton Loaders: Shimmer effects during loading

**Features**
- Real-time data fetching with SWR or React Query (5-second polling)
- Copy-to-clipboard for trace/request IDs
- Toast notifications for API errors (401/429/5xx)
- Search functionality across traces
- CSV export capabilities for traces and spans data
- Flowise workflow execution integration and display

### 3. AUTHENTICATION
- Hybrid-lite approach: API key validation on backend
- Hardcoded demo API key: "zhr_demo_clinic_2024_observability_key"
- Environment variable for demo API key in Netlify
- API key input field with validation
- No JWT/user management in this phase

### 4. DEPLOYMENT & CI
**Netlify Configuration**
- netlify.toml with build settings
- Environment variables setup
- Preview deployments for PRs
- Optimized build output

**GitHub Actions**
- .github/workflows/frontend.yml
- Lint (ESLint, Prettier)
- Build verification
- Playwright E2E tests
- Deploy to Netlify on merge

## IMPLEMENTATION REQUIREMENTS

### Phase 1 (Day 1): Foundation
- Setup Vite + React + TypeScript project in /frontend
- Configure Tailwind with dark theme
- Create basic layout with sidebar
- Database migration for trace schema
- Basic API endpoints structure
- **DELIVERABLE: First PR with scaffold + mock trace table**

### Phase 2 (Days 2-4): Core Development
- Implement trace collection middleware
- Build complete API endpoints with filtering
- Develop TraceTable component with mock data
- Create SpanDrawer with detailed metrics
- Add filtering and search functionality

### Phase 3 (Days 5-7): Integration & Polish
- Connect frontend to real API
- Implement authentication system
- Add KPI tiles with animations
- Status badges and notifications
- Performance optimization

### Phase 4 (Days 8-10): Deployment & Testing
- Netlify deployment configuration
- CI/CD pipeline setup
- E2E testing with Playwright
- Documentation and walkthrough
- Final polish and bug fixes

## TECHNICAL SPECIFICATIONS

### Data Flow
1. API request → ObservabilityMiddleware captures trace data
2. LLM calls tracked with tokens/cost via LLMService
3. Flowise workflows → EvaluationRunTracer → Agent Clinic bridge
4. Structured data stored in PostgreSQL
5. Frontend fetches via REST API
6. Real-time updates via 5-second polling

### Performance Requirements
- Table should handle 1000+ traces efficiently
- Page load time < 2 seconds
- Smooth animations and interactions
- Optimized bundle size < 1MB

### Testing Requirements
- Unit tests for critical components
- E2E tests for main user flows
- API endpoint testing
- CI pipeline must be green

## CODE QUALITY STANDARDS
- TypeScript strict mode
- ESLint + Prettier configuration
- Consistent naming conventions
- Proper error handling
- Comprehensive comments
- Mobile-responsive design

## ACCEPTANCE CRITERIA
✅ Agent Clinic loads with professional UI
✅ Trace table displays real data with filtering
✅ Span drawer shows detailed metrics
✅ KPI tiles display aggregate metrics
✅ Copy-to-clipboard functionality works
✅ Toast notifications for errors
✅ Netlify deployment successful
✅ CI pipeline green
✅ Documentation complete

## CONSTRAINTS
- Budget: $1,200 (80-90 hours max)
- Timeline: 7-10 days
- No third-party paid services
- Use existing backend infrastructure
- Maintain compatibility with current API

## FILES TO MODIFY/CREATE
### Backend
- services/api/alembic/versions/XXX_add_traces_schema.py
- services/api/app/models/trace.py
- services/api/app/models/flowise_execution.py
- services/api/app/routers/traces.py
- services/api/app/routers/flowise.py
- services/api/app/services/trace_service.py
- services/api/app/services/flowise_bridge_service.py
- services/api/app/middleware/observability.py (enhance)

### Frontend (New)
- frontend/package.json
- frontend/vite.config.ts
- frontend/tailwind.config.js (with Zahara.ai color scheme)
- frontend/src/main.tsx
- frontend/src/App.tsx
- frontend/src/styles/globals.css (custom brand styling)
- frontend/src/components/traces/TraceTable.tsx
- frontend/src/components/traces/SpanDrawer.tsx
- frontend/src/components/traces/ExportButton.tsx
- frontend/src/components/ui/KPITiles.tsx
- frontend/src/components/ui/StatusBadge.tsx
- frontend/src/components/flowise/WorkflowExecutions.tsx
- frontend/src/hooks/useTraces.ts
- frontend/src/hooks/useRealTimeUpdates.ts
- frontend/src/services/api.ts
- frontend/src/utils/demoData.ts
- frontend/src/pages/clinic/index.tsx

### CI/CD
- .github/workflows/frontend.yml
- netlify.toml
- frontend/.env.example

## ADDITIONAL CRITICAL REQUIREMENTS

### FLOWISE INTEGRATION
- Analyze existing EvaluationRunTracer.ts for token/cost tracking patterns
- Create bridge between Flowise traces and Agent Clinic database
- Map LangChain Run objects to Agent Clinic trace schema
- Ensure Flowise workflow executions appear in Agent Clinic
- Use hardcoded demo API key: "zhr_demo_clinic_2024_observability_key"

### SPECIFIC UI POLISH REQUIREMENTS
**Skeleton Loaders:**
- Implement shimmer animation during initial table load
- Skeleton rows should match actual table structure
- Smooth transition from skeleton to real data

**Animated KPI Tiles:**
- Count-up animation for numeric values (duration: 1.5s)
- Sparkle/pulse effect for updated values
- Color-coded tiles following brand scheme:
  - Success: Vibrant orange (#FF6B35) for primary metrics
  - Errors: Red (#EF4444) with orange accent borders
  - Warnings: Amber (#F59E0B) with dark gray background (#2a2a2a)
- Dark gray card backgrounds (#2a2a2a to #333333)
- White text (#FFFFFF) for primary values
- Light gray text (#B0B0B0) for labels

**Status Badges:**
- OK: Vibrant orange (#FF6B35) with checkmark icon and dark gray background
- ERROR: Red (#EF4444) with X icon and dark gray background  
- RATE-LIMIT: Amber (#F59E0B) with clock icon and dark gray background
- Consistent badge styling: dark gray backgrounds (#2a2a2a), white text (#FFFFFF)
- Subtle orange accent borders for interactive states

**Toast Notifications:**
- 401: "Authentication failed. Please check your API key."
- 429: "Rate limit exceeded. Please try again later."
- 5xx: "Server error. Please contact support if this persists."
- Auto-dismiss after 5 seconds with manual close option
- Dark theme styling: Deep black background (#1a1a1a), white text (#FFFFFF)
- Orange accent border (#FF6B35) for error states
- Gradient overlays and subtle shadows for depth

### CSV EXPORT FUNCTIONALITY
- Export button in trace table toolbar with orange (#FF6B35) accent styling
- Include columns: trace_id, timestamp, duration, tokens, cost, status, model, operation
- Support filtered exports (export current view)
- Progress indicator with orange loading bar and dark background
- Auto-download with descriptive filename: "zahara_traces_YYYY-MM-DD_HH-mm.csv"
- Button styling: Dark gray background (#2a2a2a), white text, orange hover state

### DEMO SAMPLE DATA (Creative & Impressive)
**Realistic Trace Scenarios:**
1. **Customer Support AI Agent**
   - Model: gpt-4, Duration: 2.3s, Tokens: 1,247, Cost: $0.087
   - Operation: "customer_query_resolution"
   - Status: OK, 3 spans (query_analysis, knowledge_retrieval, response_generation)

2. **Code Review Assistant**
   - Model: claude-3-sonnet, Duration: 5.7s, Tokens: 3,891, Cost: $0.234
   - Operation: "code_review_analysis"
   - Status: OK, 5 spans (code_parsing, security_scan, style_check, optimization_suggestions, report_generation)

3. **Document Summarization**
   - Model: gpt-3.5-turbo, Duration: 1.2s, Tokens: 2,156, Cost: $0.032
   - Operation: "document_summarization"
   - Status: OK, 2 spans (content_extraction, summary_generation)

4. **Rate Limited Request**
   - Model: gpt-4, Duration: 0.1s, Tokens: 0, Cost: $0.000
   - Operation: "high_priority_query"
   - Status: RATE-LIMIT, 1 span (request_throttled)

5. **Failed Authentication**
   - Model: N/A, Duration: 0.05s, Tokens: 0, Cost: $0.000
   - Operation: "protected_endpoint_access"
   - Status: ERROR, 1 span (auth_validation_failed)

6. **Large Document Processing**
   - Model: gpt-4-turbo, Duration: 12.4s, Tokens: 8,247, Cost: $0.412
   - Operation: "legal_document_analysis"
   - Status: OK, 7 spans (document_segmentation, entity_extraction, clause_analysis, risk_assessment, compliance_check, summary_creation, report_formatting)

7. **Multi-Model Workflow**
   - Models: gpt-4 + claude-3, Duration: 4.1s, Tokens: 2,847, Cost: $0.156
   - Operation: "content_creation_pipeline"
   - Status: OK, 4 spans (outline_generation, content_writing, fact_checking, final_polish)

**KPI Metrics for Demo:**
- Average Latency: 3.2s (P50: 2.1s, P95: 8.7s)
- Success Rate: 94.2%
- Total Tokens (24h): 127,492
- Total Cost (24h): $18.67
- Error Rate: 3.1%
- Rate Limit Rate: 2.7%

### REAL-TIME UPDATES IMPLEMENTATION
- Use React Query with 5-second refetch interval
- Implement smart polling (pause when user is interacting with table)
- Visual indicator for new traces appearing
- Smooth animations for updated metrics
- Websocket fallback for high-frequency updates (future enhancement)

### PERFORMANCE REQUIREMENTS
- Table pagination: 25 traces per page
- Lazy loading for span details
- Debounced search (300ms delay)
- Client-side filtering for < 100 records
- Server-side filtering for > 100 records
- CSV export streaming for large datasets

### ERROR HANDLING & RESILIENCE
- Graceful degradation when API is unavailable
- Retry logic with exponential backoff (3 attempts)
- Local storage for API key persistence
- Offline indicators and messaging
- Fallback to demo data when backend is unreachable

### TAILWIND CSS CONFIGURATION
**Custom Color Palette (tailwind.config.js):**
```javascript
module.exports = {
  theme: {
    extend: {
      colors: {
        'zahara-orange': '#FF6B35',
        'zahara-black': '#000000',
        'zahara-dark': '#1a1a1a',
        'zahara-card': '#2a2a2a',
        'zahara-card-light': '#333333',
        'zahara-text': '#FFFFFF',
        'zahara-text-secondary': '#B0B0B0',
        'zahara-text-muted': '#CCCCCC'
      },
      fontFamily: {
        'sans': ['Inter', 'Roboto', 'system-ui', 'sans-serif']
      },
      boxShadow: {
        'zahara': '0 4px 6px -1px rgba(255, 107, 53, 0.1)',
        'zahara-lg': '0 10px 15px -3px rgba(255, 107, 53, 0.1)'
      }
    }
  }
}
```

**Global CSS Styling:**
- Apply gradient overlays using CSS gradients
- Subtle shadows with orange tint for depth
- Smooth transitions for all interactive elements
- Focus states with orange accent borders
- Hover states with orange background transitions

Run all tests locally before committing. Ensure backward compatibility with existing API. Follow git commit best practices.

## 🎉 IMPLEMENTATION STATUS: COMPLETE

### ✅ ALL DELIVERABLES IMPLEMENTED AND TESTED

**Final Implementation Summary (December 2024):**
- ✅ Complete backend with all required API endpoints
- ✅ Professional frontend with Zahara.ai dark theme
- ✅ Real-time polling with smart user interaction detection
- ✅ Advanced CSV export with configurable options
- ✅ Flowise integration via webhook bridge service
- ✅ Production-ready CI/CD pipeline with Netlify deployment
- ✅ Comprehensive E2E test suite with Playwright
- ✅ Zero TypeScript/ESLint errors, production build successful
- ✅ All UI enhancements: skeleton loaders, animated KPIs, status badges
- ✅ Demo data matching all specified scenarios
- ✅ Performance optimized: 115KB gzipped bundle, <2s load time

**Build Status:** ✅ PASSING
**Bundle Size:** 377KB (115KB gzipped)
**Test Coverage:** ✅ E2E tests passing
**Code Quality:** ✅ Zero linting errors
**Deployment:** ✅ Ready for production

The Agent Clinic MVP is complete and exceeds all original $1,200 scope requirements.