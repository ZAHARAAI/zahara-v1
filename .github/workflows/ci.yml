name: ci

on: [pull_request]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        # Install test dependencies
        pip install ruff pytest pytest-asyncio httpx requests
        # Install API service dependencies for testing
        pip install -r services/api/requirements.txt
        # Install Router service dependencies for testing
        pip install -r services/router/requirements.txt
    
    - name: Lint with ruff
      run: ruff check .
    
    - name: Build Docker images
      run: make -C infra build
    
    - name: Start services for testing
      run: |
        # Use our Makefile commands for consistency
        echo "Initializing infrastructure..."
        make -C infra init
        
        echo "Starting all services..."
        make -C infra up
        
        echo "Waiting for services to be ready..."
        timeout 90s bash -c 'until curl -sf http://localhost:8000/health/; do echo "Waiting for API..."; sleep 5; done'
        timeout 30s bash -c 'until curl -sf http://localhost:7000/health; do echo "Waiting for Router..."; sleep 2; done'
        
        echo "All services started successfully!"
        make -C infra ps
        make -C infra test
    
    # Run tests before security scanning
    - name: Run tests
      run: pytest tests/ -v --tb=short
    
    # Security scanning - FAIL on CRITICAL vulnerabilities
    - name: Run Trivy vulnerability scanner - API
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'zahara-ai/api:latest'
        format: 'table'
        output: 'api-trivy-results.txt'
        severity: 'CRITICAL'  # Only CRITICAL vulnerabilities
        exit-code: '1'        # Fail workflow on CRITICAL vulnerabilities
    
    - name: Run Trivy vulnerability scanner - Router
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'zahara-ai/router:latest'
        format: 'table'
        output: 'router-trivy-results.txt'
        severity: 'CRITICAL'  # Only CRITICAL vulnerabilities  
        exit-code: '1'        # Fail workflow on CRITICAL vulnerabilities
    
    # Display API scan results in GitHub Actions summary
    - name: Display API security scan results
      if: always()
      run: |
        echo "# API Image Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scanned **zahara-ai/api:latest** for CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        if [ -f "api-trivy-results.txt" ]; then
          cat api-trivy-results.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "No API scan results found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    # Display Router scan results in GitHub Actions summary
    - name: Display Router security scan results
      if: always()
      run: |
        echo "# Router Image Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scanned **zahara-ai/router:latest** for CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        if [ -f "router-trivy-results.txt" ]; then
          cat router-trivy-results.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "No Router scan results found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    # Display overall security summary
    - name: Display security scan summary
      if: always()
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow will **PASS** if no CRITICAL vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow will **FAIL** if any CRITICAL vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed scan results available as downloadable artifacts below" >> $GITHUB_STEP_SUMMARY
        echo "- \`api-trivy-results.txt\` - API image scan details" >> $GITHUB_STEP_SUMMARY
        echo "- \`router-trivy-results.txt\` - Router image scan details" >> $GITHUB_STEP_SUMMARY
    
    # Upload scan results as artifacts
    - name: Upload security scan results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.run_id }}
        path: '*-trivy-results.txt'
        retention-days: 30
    
    - name: Cleanup
      if: always()
      run: make -C infra clean