name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: write
      pull-requests: write
      issues: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        # Install test dependencies
        pip install ruff pytest pytest-asyncio pytest-timeout httpx requests
        # Install API service dependencies for testing
        pip install -r services/api/requirements.txt
        # Install Router service dependencies for testing
        pip install -r services/router/requirements.txt
    
    - name: Install Node.js dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Lint Python code
      run: ruff check .
    
    - name: Lint and type-check frontend
      working-directory: frontend
      run: |
        npm run lint
        npm run type-check
    
    - name: Build Docker images
      run: make -C infra build
    
    - name: Build and test frontend
      working-directory: frontend
      run: |
        npm run build
        npm run test
    
    - name: Start services and verify health
      run: |
        # Start all services using Makefile
        echo "Building and starting all services..."
        cd infra
        make build
        make up
        
        # Wait for services to be ready
        echo "Waiting for services to be healthy..."
        timeout 90s bash -c 'until curl -sf http://localhost:8000/health/; do echo "Waiting for API..."; sleep 5; done'
        timeout 30s bash -c 'until curl -sf http://localhost:7000/health; do echo "Waiting for Router..."; sleep 2; done'
        timeout 30s bash -c 'until curl -sf http://localhost:3001; do echo "Waiting for Frontend..."; sleep 2; done'
        
        # Run health checks
        make test
    
    # Run Python tests
    - name: Run Python tests
      run: |
        # Run tests (dependencies already installed)
        pytest tests/ -v --tb=short
    
    # Run E2E tests
    - name: Run E2E tests
      working-directory: frontend
      run: |
        npx playwright install chromium --with-deps
        npx playwright test --project=chromium --reporter=line
      env:
        CI: true
    
    # Security scanning - FAIL on CRITICAL vulnerabilities
    - name: Run Trivy vulnerability scanner - API
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'zahara-ai/api:latest'
        format: 'table'
        output: 'api-trivy-results.txt'
        severity: 'CRITICAL'  # Only CRITICAL vulnerabilities
        exit-code: '1'        # Fail workflow on CRITICAL vulnerabilities
    
    - name: Run Trivy vulnerability scanner - Router
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'zahara-ai/router:latest'
        format: 'table'
        output: 'router-trivy-results.txt'
        severity: 'CRITICAL'  # Only CRITICAL vulnerabilities  
        exit-code: '1'        # Fail workflow on CRITICAL vulnerabilities
    
    # Display API scan results in GitHub Actions summary
    - name: Display API security scan results
      if: always()
      run: |
        echo "# API Image Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scanned **zahara-ai/api:latest** for CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        if [ -f "api-trivy-results.txt" ]; then
          cat api-trivy-results.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "No API scan results found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    # Display Router scan results in GitHub Actions summary
    - name: Display Router security scan results
      if: always()
      run: |
        echo "# Router Image Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Scanned **zahara-ai/router:latest** for CRITICAL vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        if [ -f "router-trivy-results.txt" ]; then
          cat router-trivy-results.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "No Router scan results found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    # Display overall security summary
    - name: Display security scan summary
      if: always()
      run: |
        echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow will **PASS** if no CRITICAL vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow will **FAIL** if any CRITICAL vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed scan results available as downloadable artifacts below" >> $GITHUB_STEP_SUMMARY
        echo "- \`api-trivy-results.txt\` - API image scan details" >> $GITHUB_STEP_SUMMARY
        echo "- \`router-trivy-results.txt\` - Router image scan details" >> $GITHUB_STEP_SUMMARY
    
    # Upload scan results as artifacts
    - name: Upload security scan results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.run_id }}
        path: '*-trivy-results.txt'
        retention-days: 30
    
    # Build and push Docker images (only on main branch)
    - name: Log in to Container Registry
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract API metadata
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push API image
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./services/api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
    
    - name: Extract Router metadata
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: meta-router
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-router
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Router image
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./services/router
        push: true
        tags: ${{ steps.meta-router.outputs.tags }}
        labels: ${{ steps.meta-router.outputs.labels }}
    
    - name: Extract Frontend metadata
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Frontend image
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=https://api.zahara.ai
          VITE_API_KEY=${{ secrets.VITE_API_KEY || 'zhr_demo_clinic_2024_observability_key' }}
    
    - name: Create deployment summary
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## Docker Images Built & Pushed to GHCR" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### API Image" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}-api" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** ${{ steps.meta-api.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Router Image" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}-router" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** ${{ steps.meta-router.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Image" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ env.IMAGE_NAME }}-frontend" >> $GITHUB_STEP_SUMMARY
        echo "**Tags:** ${{ steps.meta-frontend.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build ID:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Built at:** $(date -u)" >> $GITHUB_STEP_SUMMARY

    # Deploy frontend to Netlify (PR previews and production)
    - name: Deploy to Netlify (Preview)
      if: github.event_name == 'pull_request'
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=frontend/dist --alias=pr-${{ github.event.number }} --message="PR #${{ github.event.number }} - ${{ github.event.pull_request.title }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        VITE_DEMO_MODE: true
        VITE_API_BASE_URL: https://api.zahara.ai
        
    - name: Deploy to Netlify (Production)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=frontend/dist --prod --message="Production deploy - ${{ github.sha }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        VITE_DEMO_MODE: true
        VITE_API_BASE_URL: https://api.zahara.ai

    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## 🚀 Preview Deployment Ready!
          
          **Frontend URL:** https://pr-${{ github.event.pull_request.number }}--${{ secrets.NETLIFY_SITE_NAME || 'zahara-agent-clinic' }}.netlify.app
          
          ### ✅ Test Results
          - **Backend Tests:** Passed
          - **Frontend Tests:** Passed  
          - **E2E Tests:** Passed
          - **Security Scan:** Passed
          - **Docker Images:** Built (not pushed on PR)
          
          _This preview will be updated automatically when you push new commits._

    - name: Create final deployment summary
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend (Netlify)" >> $GITHUB_STEP_SUMMARY
        echo "**URL:** https://${{ secrets.NETLIFY_SITE_NAME }}.netlify.app" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Deployed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend Services (GHCR)" >> $GITHUB_STEP_SUMMARY
        echo "**API:** ghcr.io/${{ env.IMAGE_NAME }}-api:latest" >> $GITHUB_STEP_SUMMARY
        echo "**Router:** ghcr.io/${{ env.IMAGE_NAME }}-router:latest" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Images pushed to GHCR" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment ID:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Cleanup
      if: always()
      run: make -C infra clean