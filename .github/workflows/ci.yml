name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
        echo "QDRANT_URL=http://localhost:6333" >> $GITHUB_ENV
        echo "LOCAL_LLM_URL=http://localhost:11434" >> $GITHUB_ENV
    
    - name: Run database migrations
      run: |
        # Create tables (in a real app, you'd use Alembic)
        python -c "
        from app.database import engine, Base
        Base.metadata.create_all(bind=engine)
        print('Database tables created')
        "
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-
    
    
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t fastapi-backend:${{ github.sha }} .
        docker build -t fastapi-backend:latest .
    
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name test-container \
          -e DATABASE_URL=sqlite:///./test.db \
          -e REDIS_URL=redis://localhost:6379 \
          -e SECRET_KEY=test_secret \
          -p 8000:8000 \
          fastapi-backend:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health/ || exit 1
        
        # Stop container
        docker stop test-container
        docker rm test-container
    
    - name: Login to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker tag fastapi-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/fastapi-backend:${{ github.sha }}
        docker tag fastapi-backend:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-backend:latest

  integration-test:
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start services with Docker Compose
      run: |
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" > .env.local
        echo "REDIS_URL=redis://localhost:6379" >> .env.local
        echo "SECRET_KEY=test_secret_key_for_ci" >> .env.local
        docker-compose up -d
        
        # Wait for services to be ready
        timeout 300 bash -c 'until curl -f http://localhost:8000/health/all; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/health/
        curl -f http://localhost:8000/health/all
        
        # Test registration
        curl -X POST http://localhost:8000/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","email":"test@example.com","password":"testpass123"}'
        
        # Test login
        TOKEN=$(curl -X POST http://localhost:8000/auth/login \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "username=testuser&password=testpass123" | jq -r '.access_token')
        
        # Test authenticated endpoint
        curl -f http://localhost:8000/auth/me \
          -H "Authorization: Bearer $TOKEN"
    
    - name: Collect logs
      if: failure()
      run: |
        docker-compose logs > docker-compose-logs.txt
    
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-logs
        path: docker-compose-logs.txt
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  deploy:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # For example, deploy to AWS ECS, Kubernetes, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests for your staging environment
    
    - name: Notify deployment
      if: success()
      run: |
        echo "Deployment successful! ðŸš€"
        # Add notification logic (Slack, email, etc.)