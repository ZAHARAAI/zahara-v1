name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and test Node.js services
  node-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [agent-demo, agent-custom, dashboard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      working-directory: apps/${{ matrix.service }}
      run: npm ci
    
    - name: Lint code
      working-directory: apps/${{ matrix.service }}
      run: npm run lint
    
    - name: Run tests
      working-directory: apps/${{ matrix.service }}
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application
      working-directory: apps/${{ matrix.service }}
      run: npm run build

  # Lint and test Python services
  python-services:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: apps/fastapi-gateway
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint with flake8
      working-directory: apps/fastapi-gateway
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      working-directory: apps/fastapi-gateway
      run: black --check .
    
    - name: Run tests
      working-directory: apps/fastapi-gateway
      run: pytest --cov=. --cov-report=xml

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [node-services, python-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/fastapi-gateway
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent-demo
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent-custom
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push FastAPI Gateway
      uses: docker/build-push-action@v5
      with:
        context: apps/fastapi-gateway
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/fastapi-gateway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Agent Demo
      uses: docker/build-push-action@v5
      with:
        context: apps/agent-demo
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent-demo:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Agent Custom
      uses: docker/build-push-action@v5
      with:
        context: apps/agent-custom
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent-custom:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Dashboard
      uses: docker/build-push-action@v5
      with:
        context: apps/dashboard
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning with Trivy
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/fastapi-gateway:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results-fastapi.sarif'
    
    - name: Run Trivy vulnerability scanner - Agent Demo
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent-demo:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results-agent-demo.sarif'
    
    - name: Run Trivy vulnerability scanner - Agent Custom
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent-custom:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results-agent-custom.sarif'
    
    - name: Run Trivy vulnerability scanner - Dashboard
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results-dashboard.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-*.sarif'

  # Playwright E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/dashboard/package-lock.json
    
    - name: Install dependencies
      working-directory: apps/dashboard
      run: npm ci
    
    - name: Install Playwright Browsers
      working-directory: apps/dashboard
      run: npx playwright install --with-deps
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        # Wait for services to be healthy
        timeout 300 bash -c 'until docker-compose ps | grep -q "healthy"; do sleep 5; done'
    
    - name: Run Playwright tests
      working-directory: apps/dashboard
      run: npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
    
    - name: Stop services
      if: always()
      run: docker-compose down

  # Create review ZIP artifact
  create-artifact:
    runs-on: ubuntu-latest
    needs: [node-services, python-services, security-scan, e2e-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create review ZIP
      run: |
        # Create a clean copy excluding unnecessary files
        mkdir -p review-artifact
        cp -r apps/ review-artifact/
        cp -r .github/ review-artifact/
        cp docker-compose.yml review-artifact/
        cp README.md review-artifact/
        
        # Remove node_modules and build artifacts
        find review-artifact -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
        find review-artifact -name "dist" -type d -exec rm -rf {} + 2>/dev/null || true
        find review-artifact -name ".next" -type d -exec rm -rf {} + 2>/dev/null || true
        find review-artifact -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find review-artifact -name "*.pyc" -type f -delete 2>/dev/null || true
        
        # Create ZIP file
        zip -r zahara-review-${{ github.sha }}.zip review-artifact/
    
    - name: Upload review artifact
      uses: actions/upload-artifact@v4
      with:
        name: zahara-review-${{ github.sha }}
        path: zahara-review-${{ github.sha }}.zip
        retention-days: 30