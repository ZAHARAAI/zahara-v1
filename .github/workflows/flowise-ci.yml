name: 'Flowise Build & Security Scan'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: zaharaai/flowise

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout Flowise Fork
        uses: actions/checkout@v4
        with:
          repository: ZAHARAAI/Flowise
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value={{sha}}

      - name: Build Flowise Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'flowise-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'flowise-trivy-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          output-file: 'flowise-sbom.spdx.json'
          format: 'spdx-json'

      - name: Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: flowise-security-reports-${{ github.sha }}
          path: |
            flowise-trivy-results.sarif
            flowise-sbom.spdx.json
            
      - name: Contract Test Setup
        run: |
          # Start the built image for testing
          docker run -d --name flowise-test \
            -p 3000:3000 \
            -e FLOWISE_USERNAME=admin \
            -e FLOWISE_PASSWORD=admin123 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for service to be ready
          timeout 120s bash -c 'until curl -f http://localhost:3000/api/v1/ping; do sleep 2; done'

      - name: Run Contract Tests
        run: |
          # Test essential endpoints for deeplink compatibility
          echo "Testing Flowise contract compliance..."
          
          # Test 1: Health check
          curl -f http://localhost:3000/api/v1/ping || exit 1
          
          # Test 2: UI accessibility  
          curl -f http://localhost:3000 | grep -i "flowise" || exit 1
          
          # Test 3: Essential API endpoints exist
          curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/v1/chatflows | grep -E "^(200|401|403)$" || exit 1
          curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/v1/nodes | grep -E "^(200|401|403)$" || exit 1
          
          # Test 4: Canvas/UI structure (for deeplink compatibility)
          curl -s http://localhost:3000/canvas | grep -i -E "(canvas|workflow|chatflow)" || exit 1
          
          echo "âœ… All contract tests passed!"

      - name: Cleanup Test Container
        if: always()
        run: |
          docker stop flowise-test || true
          docker rm flowise-test || true

      - name: Output Final Image Details
        run: |
          echo "ðŸŽ¯ FINAL IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "ðŸ“‹ AVAILABLE TAGS:"
          echo "${{ steps.meta.outputs.tags }}"
